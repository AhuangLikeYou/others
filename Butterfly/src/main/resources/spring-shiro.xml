<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"
       default-lazy-init="true">

    <description>ApacheShiro Configuration</description>

    <!--自定义过滤器-->
    <bean id="shiroWebFilter" class="com.java.butterfly.system.shiroSecurity.ShiroWebFilter"></bean>
	<!--     登出过滤器 -->
    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/login.jsp" />
    </bean>
    
    <!-- ApacheShiro Filter  ，所有安全过滤入口-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 相关连接；登录、未认证、认证成功... -->
        <property name="unauthorizedUrl" value="/unauthor.html"/>

        <!--自定义过滤器列表-->
        <property name="filters">
            <map>
                <entry key="sperm" value-ref="shiroWebFilter"/>
            </map>
        </property>
        
		<!-- 权限控制 -->
		<!-- Shiro验证URL时,URL匹配成功便不再继续匹配查找(所以要注意配置文件中的URL顺序,尤其在使用通配符时 -->
		<!-- logout退出 -->
		<!-- anon允许匿名访问 -->
        <!-- more:http://www.cppblog.com/guojingjia2006/archive/2014/05/14/206956.html-->
        <property name="filterChainDefinitions">
            <value>
                /system/userLogin/logout = logout
                /system/userLogin/** = anon
                /system/userAccess/mainPageUnauth = anon
                /system/** = sperm
                /druid/** = sperm
            </value>
        </property>
    </bean>

    <!-- 核心安全接口，安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="webRealm"/>
    </bean>
    <!-- 用户授权信息Cache, 采用EhCache -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>
    <!-- 项目自定义的Realm -->
    <bean id="webRealm" class="com.java.butterfly.system.shiroSecurity.WebRealm">
        <property name="authorizationCacheName" value="shiro.authorizationCache"/>
    </bean>
    <!--静态注入securityManager,相当于调用了setSecurityManager方法，set进去了securityManager-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!--开启Shiro的注解功能(如@RequiresRoles,@RequiresPermissions),-->
    <!--开启Shiro注解需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证-->
    <!--需要配置两个bean(DefaultAdvisorAutoProxyCreator(可选)和 AuthorizationAttributeSourceAdvisor)实现此功能-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/static/403.html</prop>
            </props>
        </property>
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>